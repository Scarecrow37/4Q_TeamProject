// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: Move.proto
// Protobuf C++ Version: 5.29.2

#include "Move.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace MoveMsg {

inline constexpr StateChange::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        serialnumber_{0},
        stateinfo_{0} {}

template <typename>
PROTOBUF_CONSTEXPR StateChange::StateChange(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct StateChangeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StateChangeDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StateChangeDefaultTypeInternal() {}
  union {
    StateChange _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StateChangeDefaultTypeInternal _StateChange_default_instance_;

inline constexpr MoveSync::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        serialnumber_{0},
        x_{0},
        y_{0},
        z_{0} {}

template <typename>
PROTOBUF_CONSTEXPR MoveSync::MoveSync(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MoveSyncDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveSyncDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveSyncDefaultTypeInternal() {}
  union {
    MoveSync _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveSyncDefaultTypeInternal _MoveSync_default_instance_;

inline constexpr Move::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        serialnumber_{0},
        x_{0},
        y_{0},
        z_{0},
        speed_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Move::Move(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct MoveDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveDefaultTypeInternal() {}
  union {
    Move _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveDefaultTypeInternal _Move_default_instance_;

inline constexpr Jump::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        serialnumber_{0},
        power_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Jump::Jump(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct JumpDefaultTypeInternal {
  PROTOBUF_CONSTEXPR JumpDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~JumpDefaultTypeInternal() {}
  union {
    Jump _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 JumpDefaultTypeInternal _Jump_default_instance_;
}  // namespace MoveMsg
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_Move_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_Move_2eproto = nullptr;
const ::uint32_t
    TableStruct_Move_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::MoveMsg::Move, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::MoveMsg::Move, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MoveMsg::Move, _impl_.serialnumber_),
        PROTOBUF_FIELD_OFFSET(::MoveMsg::Move, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::MoveMsg::Move, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::MoveMsg::Move, _impl_.z_),
        PROTOBUF_FIELD_OFFSET(::MoveMsg::Move, _impl_.speed_),
        0,
        1,
        2,
        3,
        4,
        PROTOBUF_FIELD_OFFSET(::MoveMsg::Jump, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::MoveMsg::Jump, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MoveMsg::Jump, _impl_.serialnumber_),
        PROTOBUF_FIELD_OFFSET(::MoveMsg::Jump, _impl_.power_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::MoveMsg::StateChange, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::MoveMsg::StateChange, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MoveMsg::StateChange, _impl_.serialnumber_),
        PROTOBUF_FIELD_OFFSET(::MoveMsg::StateChange, _impl_.stateinfo_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::MoveMsg::MoveSync, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::MoveMsg::MoveSync, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::MoveMsg::MoveSync, _impl_.serialnumber_),
        PROTOBUF_FIELD_OFFSET(::MoveMsg::MoveSync, _impl_.x_),
        PROTOBUF_FIELD_OFFSET(::MoveMsg::MoveSync, _impl_.y_),
        PROTOBUF_FIELD_OFFSET(::MoveMsg::MoveSync, _impl_.z_),
        0,
        1,
        2,
        3,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 13, -1, sizeof(::MoveMsg::Move)},
        {18, 28, -1, sizeof(::MoveMsg::Jump)},
        {30, 40, -1, sizeof(::MoveMsg::StateChange)},
        {42, 54, -1, sizeof(::MoveMsg::MoveSync)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::MoveMsg::_Move_default_instance_._instance,
    &::MoveMsg::_Jump_default_instance_._instance,
    &::MoveMsg::_StateChange_default_instance_._instance,
    &::MoveMsg::_MoveSync_default_instance_._instance,
};
const char descriptor_table_protodef_Move_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\nMove.proto\022\007MoveMsg\"\222\001\n\004Move\022\031\n\014serial"
    "number\030\001 \001(\005H\000\210\001\001\022\016\n\001x\030\002 \001(\002H\001\210\001\001\022\016\n\001y\030\003"
    " \001(\002H\002\210\001\001\022\016\n\001z\030\004 \001(\002H\003\210\001\001\022\022\n\005speed\030\005 \001(\002"
    "H\004\210\001\001B\017\n\r_serialnumberB\004\n\002_xB\004\n\002_yB\004\n\002_z"
    "B\010\n\006_speed\"P\n\004Jump\022\031\n\014serialnumber\030\001 \001(\005"
    "H\000\210\001\001\022\022\n\005power\030\002 \001(\002H\001\210\001\001B\017\n\r_serialnumb"
    "erB\010\n\006_power\"_\n\013StateChange\022\031\n\014serialnum"
    "ber\030\001 \001(\005H\000\210\001\001\022\026\n\tstateinfo\030\002 \001(\005H\001\210\001\001B\017"
    "\n\r_serialnumberB\014\n\n_stateinfo\"x\n\010MoveSyn"
    "c\022\031\n\014serialnumber\030\001 \001(\005H\000\210\001\001\022\016\n\001x\030\002 \001(\002H"
    "\001\210\001\001\022\016\n\001y\030\003 \001(\002H\002\210\001\001\022\016\n\001z\030\004 \001(\002H\003\210\001\001B\017\n\r"
    "_serialnumberB\004\n\002_xB\004\n\002_yB\004\n\002_zb\006proto3"
};
static ::absl::once_flag descriptor_table_Move_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_Move_2eproto = {
    false,
    false,
    479,
    descriptor_table_protodef_Move_2eproto,
    "Move.proto",
    &descriptor_table_Move_2eproto_once,
    nullptr,
    0,
    4,
    schemas,
    file_default_instances,
    TableStruct_Move_2eproto::offsets,
    file_level_enum_descriptors_Move_2eproto,
    file_level_service_descriptors_Move_2eproto,
};
namespace MoveMsg {
// ===================================================================

class Move::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Move>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Move, _impl_._has_bits_);
};

Move::Move(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MoveMsg.Move)
}
Move::Move(
    ::google::protobuf::Arena* arena, const Move& from)
    : Move(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Move::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Move::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, serialnumber_),
           0,
           offsetof(Impl_, speed_) -
               offsetof(Impl_, serialnumber_) +
               sizeof(Impl_::speed_));
}
Move::~Move() {
  // @@protoc_insertion_point(destructor:MoveMsg.Move)
  SharedDtor(*this);
}
inline void Move::SharedDtor(MessageLite& self) {
  Move& this_ = static_cast<Move&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Move::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Move(arena);
}
constexpr auto Move::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Move),
                                            alignof(Move));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Move::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Move_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Move::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Move>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Move::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Move>(), &Move::ByteSizeLong,
            &Move::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Move, _impl_._cached_size_),
        false,
    },
    &Move::kDescriptorMethods,
    &descriptor_table_Move_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Move::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 0, 2> Move::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Move, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MoveMsg::Move>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 serialnumber = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Move, _impl_.serialnumber_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Move, _impl_.serialnumber_)}},
    // optional float x = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(Move, _impl_.x_)}},
    // optional float y = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(Move, _impl_.y_)}},
    // optional float z = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(Move, _impl_.z_)}},
    // optional float speed = 5;
    {::_pbi::TcParser::FastF32S1,
     {45, 4, 0, PROTOBUF_FIELD_OFFSET(Move, _impl_.speed_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 serialnumber = 1;
    {PROTOBUF_FIELD_OFFSET(Move, _impl_.serialnumber_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float x = 2;
    {PROTOBUF_FIELD_OFFSET(Move, _impl_.x_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float y = 3;
    {PROTOBUF_FIELD_OFFSET(Move, _impl_.y_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float z = 4;
    {PROTOBUF_FIELD_OFFSET(Move, _impl_.z_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float speed = 5;
    {PROTOBUF_FIELD_OFFSET(Move, _impl_.speed_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Move::Clear() {
// @@protoc_insertion_point(message_clear_start:MoveMsg.Move)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&_impl_.serialnumber_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.speed_) -
        reinterpret_cast<char*>(&_impl_.serialnumber_)) + sizeof(_impl_.speed_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Move::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Move& this_ = static_cast<const Move&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Move::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Move& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:MoveMsg.Move)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional int32 serialnumber = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_serialnumber(), target);
          }

          // optional float x = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_x(), target);
          }

          // optional float y = 3;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_y(), target);
          }

          // optional float z = 4;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_z(), target);
          }

          // optional float speed = 5;
          if (cached_has_bits & 0x00000010u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                5, this_._internal_speed(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:MoveMsg.Move)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Move::ByteSizeLong(const MessageLite& base) {
          const Move& this_ = static_cast<const Move&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Move::ByteSizeLong() const {
          const Move& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:MoveMsg.Move)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000001fu) {
            // optional int32 serialnumber = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_serialnumber());
            }
            // optional float x = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 5;
            }
            // optional float y = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 5;
            }
            // optional float z = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
            // optional float speed = 5;
            if (cached_has_bits & 0x00000010u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Move::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Move*>(&to_msg);
  auto& from = static_cast<const Move&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MoveMsg.Move)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.serialnumber_ = from._impl_.serialnumber_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.speed_ = from._impl_.speed_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Move::CopyFrom(const Move& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MoveMsg.Move)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Move::InternalSwap(Move* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Move, _impl_.speed_)
      + sizeof(Move::_impl_.speed_)
      - PROTOBUF_FIELD_OFFSET(Move, _impl_.serialnumber_)>(
          reinterpret_cast<char*>(&_impl_.serialnumber_),
          reinterpret_cast<char*>(&other->_impl_.serialnumber_));
}

::google::protobuf::Metadata Move::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Jump::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Jump>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Jump, _impl_._has_bits_);
};

Jump::Jump(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MoveMsg.Jump)
}
Jump::Jump(
    ::google::protobuf::Arena* arena, const Jump& from)
    : Jump(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE Jump::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void Jump::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, serialnumber_),
           0,
           offsetof(Impl_, power_) -
               offsetof(Impl_, serialnumber_) +
               sizeof(Impl_::power_));
}
Jump::~Jump() {
  // @@protoc_insertion_point(destructor:MoveMsg.Jump)
  SharedDtor(*this);
}
inline void Jump::SharedDtor(MessageLite& self) {
  Jump& this_ = static_cast<Jump&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* Jump::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Jump(arena);
}
constexpr auto Jump::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(Jump),
                                            alignof(Jump));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Jump::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Jump_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Jump::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Jump>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Jump::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Jump>(), &Jump::ByteSizeLong,
            &Jump::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Jump, _impl_._cached_size_),
        false,
    },
    &Jump::kDescriptorMethods,
    &descriptor_table_Move_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Jump::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> Jump::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Jump, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MoveMsg::Jump>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional float power = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(Jump, _impl_.power_)}},
    // optional int32 serialnumber = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Jump, _impl_.serialnumber_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(Jump, _impl_.serialnumber_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 serialnumber = 1;
    {PROTOBUF_FIELD_OFFSET(Jump, _impl_.serialnumber_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float power = 2;
    {PROTOBUF_FIELD_OFFSET(Jump, _impl_.power_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void Jump::Clear() {
// @@protoc_insertion_point(message_clear_start:MoveMsg.Jump)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.serialnumber_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.power_) -
        reinterpret_cast<char*>(&_impl_.serialnumber_)) + sizeof(_impl_.power_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Jump::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Jump& this_ = static_cast<const Jump&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Jump::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Jump& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:MoveMsg.Jump)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional int32 serialnumber = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_serialnumber(), target);
          }

          // optional float power = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_power(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:MoveMsg.Jump)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Jump::ByteSizeLong(const MessageLite& base) {
          const Jump& this_ = static_cast<const Jump&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Jump::ByteSizeLong() const {
          const Jump& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:MoveMsg.Jump)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional int32 serialnumber = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_serialnumber());
            }
            // optional float power = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Jump::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Jump*>(&to_msg);
  auto& from = static_cast<const Jump&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MoveMsg.Jump)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.serialnumber_ = from._impl_.serialnumber_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.power_ = from._impl_.power_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Jump::CopyFrom(const Jump& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MoveMsg.Jump)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Jump::InternalSwap(Jump* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Jump, _impl_.power_)
      + sizeof(Jump::_impl_.power_)
      - PROTOBUF_FIELD_OFFSET(Jump, _impl_.serialnumber_)>(
          reinterpret_cast<char*>(&_impl_.serialnumber_),
          reinterpret_cast<char*>(&other->_impl_.serialnumber_));
}

::google::protobuf::Metadata Jump::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class StateChange::_Internal {
 public:
  using HasBits =
      decltype(std::declval<StateChange>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(StateChange, _impl_._has_bits_);
};

StateChange::StateChange(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MoveMsg.StateChange)
}
StateChange::StateChange(
    ::google::protobuf::Arena* arena, const StateChange& from)
    : StateChange(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE StateChange::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void StateChange::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, serialnumber_),
           0,
           offsetof(Impl_, stateinfo_) -
               offsetof(Impl_, serialnumber_) +
               sizeof(Impl_::stateinfo_));
}
StateChange::~StateChange() {
  // @@protoc_insertion_point(destructor:MoveMsg.StateChange)
  SharedDtor(*this);
}
inline void StateChange::SharedDtor(MessageLite& self) {
  StateChange& this_ = static_cast<StateChange&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* StateChange::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) StateChange(arena);
}
constexpr auto StateChange::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(StateChange),
                                            alignof(StateChange));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull StateChange::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_StateChange_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &StateChange::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<StateChange>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &StateChange::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<StateChange>(), &StateChange::ByteSizeLong,
            &StateChange::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(StateChange, _impl_._cached_size_),
        false,
    },
    &StateChange::kDescriptorMethods,
    &descriptor_table_Move_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* StateChange::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> StateChange::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StateChange, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MoveMsg::StateChange>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional int32 stateinfo = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StateChange, _impl_.stateinfo_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(StateChange, _impl_.stateinfo_)}},
    // optional int32 serialnumber = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(StateChange, _impl_.serialnumber_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(StateChange, _impl_.serialnumber_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 serialnumber = 1;
    {PROTOBUF_FIELD_OFFSET(StateChange, _impl_.serialnumber_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 stateinfo = 2;
    {PROTOBUF_FIELD_OFFSET(StateChange, _impl_.stateinfo_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void StateChange::Clear() {
// @@protoc_insertion_point(message_clear_start:MoveMsg.StateChange)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.serialnumber_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.stateinfo_) -
        reinterpret_cast<char*>(&_impl_.serialnumber_)) + sizeof(_impl_.stateinfo_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* StateChange::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const StateChange& this_ = static_cast<const StateChange&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* StateChange::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const StateChange& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:MoveMsg.StateChange)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional int32 serialnumber = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_serialnumber(), target);
          }

          // optional int32 stateinfo = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<2>(
                    stream, this_._internal_stateinfo(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:MoveMsg.StateChange)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t StateChange::ByteSizeLong(const MessageLite& base) {
          const StateChange& this_ = static_cast<const StateChange&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t StateChange::ByteSizeLong() const {
          const StateChange& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:MoveMsg.StateChange)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional int32 serialnumber = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_serialnumber());
            }
            // optional int32 stateinfo = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_stateinfo());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void StateChange::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<StateChange*>(&to_msg);
  auto& from = static_cast<const StateChange&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MoveMsg.StateChange)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.serialnumber_ = from._impl_.serialnumber_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.stateinfo_ = from._impl_.stateinfo_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StateChange::CopyFrom(const StateChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MoveMsg.StateChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void StateChange::InternalSwap(StateChange* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(StateChange, _impl_.stateinfo_)
      + sizeof(StateChange::_impl_.stateinfo_)
      - PROTOBUF_FIELD_OFFSET(StateChange, _impl_.serialnumber_)>(
          reinterpret_cast<char*>(&_impl_.serialnumber_),
          reinterpret_cast<char*>(&other->_impl_.serialnumber_));
}

::google::protobuf::Metadata StateChange::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class MoveSync::_Internal {
 public:
  using HasBits =
      decltype(std::declval<MoveSync>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(MoveSync, _impl_._has_bits_);
};

MoveSync::MoveSync(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:MoveMsg.MoveSync)
}
MoveSync::MoveSync(
    ::google::protobuf::Arena* arena, const MoveSync& from)
    : MoveSync(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE MoveSync::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void MoveSync::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, serialnumber_),
           0,
           offsetof(Impl_, z_) -
               offsetof(Impl_, serialnumber_) +
               sizeof(Impl_::z_));
}
MoveSync::~MoveSync() {
  // @@protoc_insertion_point(destructor:MoveMsg.MoveSync)
  SharedDtor(*this);
}
inline void MoveSync::SharedDtor(MessageLite& self) {
  MoveSync& this_ = static_cast<MoveSync&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* MoveSync::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) MoveSync(arena);
}
constexpr auto MoveSync::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(MoveSync),
                                            alignof(MoveSync));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull MoveSync::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_MoveSync_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &MoveSync::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<MoveSync>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &MoveSync::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<MoveSync>(), &MoveSync::ByteSizeLong,
            &MoveSync::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(MoveSync, _impl_._cached_size_),
        false,
    },
    &MoveSync::kDescriptorMethods,
    &descriptor_table_Move_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* MoveSync::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 0, 2> MoveSync::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(MoveSync, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::MoveMsg::MoveSync>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional float z = 4;
    {::_pbi::TcParser::FastF32S1,
     {37, 3, 0, PROTOBUF_FIELD_OFFSET(MoveSync, _impl_.z_)}},
    // optional int32 serialnumber = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(MoveSync, _impl_.serialnumber_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(MoveSync, _impl_.serialnumber_)}},
    // optional float x = 2;
    {::_pbi::TcParser::FastF32S1,
     {21, 1, 0, PROTOBUF_FIELD_OFFSET(MoveSync, _impl_.x_)}},
    // optional float y = 3;
    {::_pbi::TcParser::FastF32S1,
     {29, 2, 0, PROTOBUF_FIELD_OFFSET(MoveSync, _impl_.y_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 serialnumber = 1;
    {PROTOBUF_FIELD_OFFSET(MoveSync, _impl_.serialnumber_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional float x = 2;
    {PROTOBUF_FIELD_OFFSET(MoveSync, _impl_.x_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float y = 3;
    {PROTOBUF_FIELD_OFFSET(MoveSync, _impl_.y_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
    // optional float z = 4;
    {PROTOBUF_FIELD_OFFSET(MoveSync, _impl_.z_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kFloat)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void MoveSync::Clear() {
// @@protoc_insertion_point(message_clear_start:MoveMsg.MoveSync)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&_impl_.serialnumber_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.z_) -
        reinterpret_cast<char*>(&_impl_.serialnumber_)) + sizeof(_impl_.z_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* MoveSync::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const MoveSync& this_ = static_cast<const MoveSync&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* MoveSync::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const MoveSync& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:MoveMsg.MoveSync)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional int32 serialnumber = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<1>(
                    stream, this_._internal_serialnumber(), target);
          }

          // optional float x = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                2, this_._internal_x(), target);
          }

          // optional float y = 3;
          if (cached_has_bits & 0x00000004u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                3, this_._internal_y(), target);
          }

          // optional float z = 4;
          if (cached_has_bits & 0x00000008u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteFloatToArray(
                4, this_._internal_z(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:MoveMsg.MoveSync)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t MoveSync::ByteSizeLong(const MessageLite& base) {
          const MoveSync& this_ = static_cast<const MoveSync&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t MoveSync::ByteSizeLong() const {
          const MoveSync& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:MoveMsg.MoveSync)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000000fu) {
            // optional int32 serialnumber = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_serialnumber());
            }
            // optional float x = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 5;
            }
            // optional float y = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 5;
            }
            // optional float z = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 5;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void MoveSync::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<MoveSync*>(&to_msg);
  auto& from = static_cast<const MoveSync&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:MoveMsg.MoveSync)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.serialnumber_ = from._impl_.serialnumber_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.x_ = from._impl_.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.y_ = from._impl_.y_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.z_ = from._impl_.z_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void MoveSync::CopyFrom(const MoveSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MoveMsg.MoveSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void MoveSync::InternalSwap(MoveSync* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveSync, _impl_.z_)
      + sizeof(MoveSync::_impl_.z_)
      - PROTOBUF_FIELD_OFFSET(MoveSync, _impl_.serialnumber_)>(
          reinterpret_cast<char*>(&_impl_.serialnumber_),
          reinterpret_cast<char*>(&other->_impl_.serialnumber_));
}

::google::protobuf::Metadata MoveSync::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace MoveMsg
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_Move_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
